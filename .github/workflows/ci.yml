name: BCBS Values CI

# Trigger workflow on push to main branch or any pull request
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    # Define service containers for PostgreSQL
    services:
      # PostgreSQL service container for integration tests
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: bcbs_test
        ports:
          - 5432:5432
        # Health check to ensure postgres is available before running tests
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Check out repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python environment
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      # Install dependencies from requirements.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # If requirements.txt doesn't exist, create one from pyproject.toml
          if [ ! -f requirements.txt ]; then
            pip install pip-tools
            pip-compile pyproject.toml --output-file=requirements.txt
          fi
          pip install -r requirements.txt
          # Install pytest and other testing dependencies
          pip install pytest pytest-cov
      
      # Set up environment variables securely
      - name: Set up environment variables
        env:
          # Database configuration
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/bcbs_test
          PGUSER: postgres
          PGPASSWORD: postgres
          PGHOST: localhost
          PGPORT: 5432
          PGDATABASE: bcbs_test
          # API keys from GitHub secrets
          NARRPR_USERNAME: ${{ secrets.NARRPR_USERNAME }}
          NARRPR_PASSWORD: ${{ secrets.NARRPR_PASSWORD }}
          PACS_API_KEY: ${{ secrets.PACS_API_KEY }}
          # App configuration
          FLASK_ENV: testing
          FLASK_DEBUG: 1
          SESSION_SECRET: ${{ secrets.SESSION_SECRET || 'test-secret-key' }}
        # Create .env file for applications that load environment variables from file
        run: |
          echo "Creating .env file for testing"
          echo "DATABASE_URL=${DATABASE_URL}" > .env
          echo "PGUSER=${PGUSER}" >> .env
          echo "PGPASSWORD=${PGPASSWORD}" >> .env
          echo "PGHOST=${PGHOST}" >> .env
          echo "PGPORT=${PGPORT}" >> .env
          echo "PGDATABASE=${PGDATABASE}" >> .env
          echo "FLASK_ENV=${FLASK_ENV}" >> .env
          echo "FLASK_DEBUG=${FLASK_DEBUG}" >> .env
          
          if [ -n "$NARRPR_USERNAME" ]; then
            echo "NARRPR_USERNAME=${NARRPR_USERNAME}" >> .env
          fi
          if [ -n "$NARRPR_PASSWORD" ]; then
            echo "NARRPR_PASSWORD=${NARRPR_PASSWORD}" >> .env
          fi
          if [ -n "$PACS_API_KEY" ]; then
            echo "PACS_API_KEY=${PACS_API_KEY}" >> .env
          fi
          if [ -n "$SESSION_SECRET" ]; then
            echo "SESSION_SECRET=${SESSION_SECRET}" >> .env
          fi

      # Run database migrations/setup if necessary
      - name: Setup database schema
        run: |
          # Create any required database tables
          python -c "
          import os
          import sys
          sys.path.append('.')
          from db.database import Database
          db = Database()
          db.create_tables()
          print('Database schema created successfully')
          "

      # Run all pytest tests
      - name: Run tests with pytest
        run: |
          pytest -v tests/ --cov=. --cov-report=xml
          
      # Store test coverage reports as artifacts
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml
          
      # Upload configuration files as artifacts
      - name: Upload configuration files
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: configuration-files
          path: |
            configs/module_config.json
            configs/database_config.json
            configs/etl_config.json
          
      # Upload validation results if tests pass
      - name: Upload validation results
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: validation-results
          path: |
            etl_outputs/*.json
            validation_results*.json