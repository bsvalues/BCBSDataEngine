name: BCBS Values CI/CD Pipeline

# Trigger the workflow on pushes to main branch and pull requests to any branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ '*' ]

jobs:
  test:
    # Run on the latest Ubuntu runner
    runs-on: ubuntu-latest
    
    # Define environment variables available to all steps
    env:
      PYTHONPATH: ${{ github.workspace }}
      # Default database URL for tests (will be overridden by test fixtures)
      DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
    
    steps:
      # Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v3
      
      # Set up Python environment with specified version
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip' # Cache pip dependencies for faster builds
      
      # Install system dependencies required for some Python packages
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev postgresql-client libgomp1
          # libgomp1 is required for LightGBM
      
      # Install Python dependencies from requirements.txt
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; else pip install -e .; fi
          # Install additional testing dependencies
          pip install pytest pytest-cov coverage
      
      # Set up PostgreSQL service container for integration tests
      - name: Set up PostgreSQL
        uses: harmon758/postgresql-action@v1
        with:
          postgresql version: '14'
          postgresql db: 'bcbs_test'
          postgresql user: 'postgres'
          postgresql password: 'postgres'
      
      # Load secrets into environment variables
      - name: Load environment variables
        run: |
          echo "NARRPR_USERNAME=${{ secrets.NARRPR_USERNAME }}" >> $GITHUB_ENV
          echo "NARRPR_PASSWORD=${{ secrets.NARRPR_PASSWORD }}" >> $GITHUB_ENV
          echo "PACS_API_KEY=${{ secrets.PACS_API_KEY }}" >> $GITHUB_ENV
          echo "TEST_DATABASE_URL=postgresql://postgres:postgres@localhost:5432/bcbs_test" >> $GITHUB_ENV
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/bcbs_test" >> $GITHUB_ENV
      
      # Verify test database connection
      - name: Verify database connection
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -c "\l" bcbs_test
      
      # Create test database schema
      - name: Create database schema
        run: |
          # Create tables using SQLAlchemy models
          python -c "from app import app; from db.models import *; app.app_context().push(); db.create_all()"
      
      # Run unit tests with pytest
      - name: Run unit tests
        run: |
          python -m pytest tests/ -v --exclude-integration
      
      # Run integration tests
      - name: Run integration tests
        run: |
          python -m pytest tests/test_integration_advanced.py -v
      
      # Generate test coverage report
      - name: Generate coverage report
        run: |
          python -m pytest --cov=. --cov-report=xml
      
      # Upload test coverage to Codecov (optional)
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          fail_ci_if_error: false
      
      # Upload configuration artifacts if tests pass
      - name: Upload artifacts
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: configuration-files
          path: |
            configs/module_config.json
            configs/database_config.json
            configs/etl_config.json
          retention-days: 7
      
  deploy:
    # This job only runs if tests pass and we're on the main branch
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      # Download artifacts from test job
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: configuration-files
          path: configs
      
      # Here you would add deployment steps for your specific environment
      # For example, deploying to a server, Heroku, AWS, etc.
      - name: Prepare for deployment
        run: |
          echo "Preparing for deployment to production environment"
          # Add your deployment commands here