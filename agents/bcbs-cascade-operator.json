{
  "name": "BCBS Cascade Operator",
  "description": "An orchestration agent for multi-agent workflows in the BCBS_Values system",
  "version": "3.0.0",
  
  "_comment_trigger": "Phrase or command that activates this orchestration agent",
  "trigger": "cascade-operator",
  
  "_comment_versioning": "Version control information and compatibility requirements",
  "versioning": {
    "schema_version": "3.0.0",
    "compatibility": {
      "min_api_version": "1.0.0",
      "max_api_version": "3.x.x"
    },
    "change_history": [
      {
        "version": "1.0.0",
        "date": "2025-03-29",
        "changes": "Initial implementation"
      },
      {
        "version": "2.0.0",
        "date": "2025-03-30",
        "changes": "Enhanced inter-agent communication protocol, added calibration data and error reporting"
      },
      {
        "version": "3.0.0",
        "date": "2025-03-30",
        "changes": "Comprehensive update with enhanced MPC protocol, expanded error handling, and unified workflow orchestration"
      }
    ],
    "version_control": {
      "repository": "bcbs-values-agents",
      "branch": "main",
      "commit_hash": "e89f45c7d2a1b3f8e6d9c0a2e4f6b8d0c2a4e6f8"
    }
  },
  
  "_comment_orchestration": "Core capabilities for multi-agent orchestration",
  "orchestration_capabilities": {
    "execution_modes": ["sequential", "parallel", "conditional", "event-driven", "adaptive"],
    "agent_coordination": true,
    "state_persistence": true,
    "workflow_visualization": true,
    "protocol_enforcement": true,
    "exception_handling": "structured",
    "multi_agent_capabilities": {
      "coordination_patterns": ["centralized", "decentralized", "hierarchical"],
      "consensus_algorithms": ["majority-vote", "weighted-vote", "threshold-based", "ensemble-consensus"],
      "conflict_resolution": "priority-based",
      "resource_allocation": "dynamic"
    },
    "workflow_optimization": {
      "auto_scaling": true,
      "task_prioritization": true,
      "load_balancing": "adaptive",
      "performance_monitoring": true,
      "bottleneck_detection": true
    },
    "real_time_feedback": {
      "progress_reporting": true,
      "health_monitoring": true,
      "bottleneck_detection": true,
      "alert_thresholds": {
        "task_duration": "> 120s",
        "error_rate": "> 5%",
        "resource_utilization": "> 85%",
        "model_drift": "> 10%"
      }
    }
  },
  
  "_comment_registry": "Registry of all available agents that can be coordinated by this operator",
  "agent_registry": {
    "agent_types": [
      {
        "type": "bootstrap",
        "name": "Bootstrap Commander",
        "config_path": "agents/bcbs-bootstrap-commander.json",
        "capabilities": ["environment-setup", "dependency-validation", "test-execution", "workflow-initialization"],
        "communication_channels": ["direct-command", "status-update", "model-parameter-exchange", "protocol-calibration"],
        "protocol_version": "3.0.0",
        "role": "infrastructure",
        "priority": "high",
        "startup_sequence": 1,
        "security_clearance": "admin",
        "resource_requirements": {
          "memory": "medium",
          "cpu": "low",
          "disk": "low"
        },
        "health_check_endpoint": "/api/agents/bootstrap/health",
        "failover_strategy": "restart-with-checkpoint"
      },
      {
        "type": "etl",
        "name": "ETL Processor",
        "config_path": "agents/bootstrap-commander.json",
        "capabilities": ["data-extraction", "data-transformation", "data-loading", "data-validation", "source-integration"],
        "communication_channels": ["data-pipeline", "validation-results", "status-update", "model-parameter-exchange", "data-quality-metrics"],
        "protocol_version": "3.0.0",
        "role": "data-processing",
        "priority": "normal",
        "startup_sequence": 2,
        "security_clearance": "data-admin",
        "resource_requirements": {
          "memory": "high",
          "cpu": "medium",
          "disk": "high"
        },
        "data_sources": ["mls", "narrpr", "pacs", "gis"],
        "data_quality_metrics": ["completeness", "consistency", "accuracy", "timeliness"],
        "health_check_endpoint": "/api/agents/etl/health",
        "failover_strategy": "resume-from-checkpoint"
      },
      {
        "type": "valuation",
        "name": "God-Tier Builder",
        "config_path": "agents/god-tier-builder.json",
        "capabilities": ["valuation-modeling", "feature-engineering", "prediction-generation", "parameter-optimization", "model-calibration"],
        "communication_channels": ["model-updates", "prediction-results", "status-update", "model-parameter-exchange", "calibration-data", "performance-metrics"],
        "protocol_version": "3.0.0",
        "role": "model-builder",
        "priority": "high",
        "startup_sequence": 3,
        "security_clearance": "model-admin",
        "resource_requirements": {
          "memory": "high",
          "cpu": "high",
          "disk": "medium",
          "gpu": "optional"
        },
        "model_types": ["linear", "ensemble", "lightgbm", "spatial", "hybrid-ensemble"],
        "feature_engineering_capabilities": ["polynomial", "spatial", "interaction", "selection", "auto-feature-discovery"],
        "health_check_endpoint": "/api/agents/valuation/health",
        "failover_strategy": "hot-standby-switch"
      },
      {
        "type": "validation",
        "name": "TDD Validator",
        "config_path": "agents/tdd-validator.json",
        "capabilities": ["validation-logic", "test-execution", "quality-assurance", "model-validation", "drift-detection"],
        "communication_channels": ["validation-results", "test-reports", "status-update", "model-parameter-exchange", "error-reporting", "calibration-feedback"],
        "protocol_version": "3.0.0",
        "role": "quality-assurance",
        "priority": "high",
        "startup_sequence": 4,
        "security_clearance": "validation-admin",
        "resource_requirements": {
          "memory": "medium",
          "cpu": "medium",
          "disk": "medium"
        },
        "validation_strategies": ["cross-validation", "holdout", "backtesting", "sensitivity", "monte-carlo", "adversarial"],
        "metrics": ["r2", "adj_r2", "rmse", "mae", "mape", "calibration_error", "feature_importance_stability"],
        "health_check_endpoint": "/api/agents/validation/health",
        "failover_strategy": "checkpoint-recovery"
      }
    ],
    "agent_relationships": {
      "hierarchical": [
        {
          "parent": "bootstrap",
          "children": ["etl", "valuation", "validation"],
          "relationship_type": "deployment-control",
          "delegation_rules": {
            "task_delegation": "priority-based",
            "escalation_path": "bootstrap",
            "monitoring_responsibility": "parent-to-child"
          }
        }
      ],
      "peer_to_peer": [
        {
          "agents": ["etl", "valuation"],
          "relationship_type": "data-model-pipeline",
          "communication_pattern": "sequential",
          "data_contract": {
            "schema_validation": true,
            "quality_thresholds": {
              "completeness": 0.95,
              "consistency": 0.98
            }
          }
        },
        {
          "agents": ["valuation", "validation"],
          "relationship_type": "model-validation-feedback",
          "communication_pattern": "bidirectional",
          "feedback_loop": {
            "validation_frequency": "every-model-update",
            "performance_threshold": {
              "r2_minimum": 0.85,
              "mae_maximum": 0.09
            }
          }
        }
      ],
      "conflict_resolution": {
        "mechanism": "priority-based",
        "arbitrator": "bootstrap",
        "resolution_strategies": {
          "parameter_conflicts": "newest-wins-with-validation",
          "resource_conflicts": "priority-based-allocation",
          "quality_threshold_conflicts": "stricter-wins"
        }
      }
    }
  },
  
  "_comment_workflow": "Pre-defined workflow templates for common operations",
  "workflow_templates": [
    {
      "name": "full_etl_cycle",
      "description": "Complete ETL pipeline execution with validation",
      "steps": [
        {
          "step_id": "extract_data",
          "agent": "etl",
          "action": "extract",
          "sources": ["mls", "narrpr", "pacs"],
          "params": {
            "validate_source_data": true,
            "incremental_only": false,
            "output_format": "normalized_json"
          },
          "output_artifacts": ["raw_property_data"],
          "success_criteria": {
            "min_properties": 1000,
            "required_fields_present": ["address", "sale_date", "sale_price"]
          }
        },
        {
          "step_id": "transform_data",
          "agent": "etl",
          "action": "transform",
          "input_artifacts": ["raw_property_data"],
          "params": {
            "normalize_fields": true,
            "handle_missing_values": "impute",
            "outlier_detection": "iqr",
            "derive_features": true
          },
          "output_artifacts": ["transformed_property_data"],
          "success_criteria": {
            "missing_value_rate": "< 0.05",
            "outlier_proportion": "< 0.02"
          }
        },
        {
          "step_id": "load_data",
          "agent": "etl",
          "action": "load",
          "input_artifacts": ["transformed_property_data"],
          "params": {
            "batch_size": 1000,
            "create_indexes": true,
            "verify_integrity": true
          },
          "output_artifacts": ["database_load_report"],
          "success_criteria": {
            "records_loaded": "== input_record_count",
            "index_creation_success": true
          }
        },
        {
          "step_id": "validate_loaded_data",
          "agent": "validation",
          "action": "validate_data",
          "input_artifacts": ["database_load_report"],
          "params": {
            "comprehensive": true,
            "validation_rules": ["referential_integrity", "business_rules", "statistical_validity"]
          },
          "output_artifacts": ["validation_report"],
          "success_criteria": {
            "validation_pass_rate": "> 0.98",
            "critical_errors": "== 0"
          }
        }
      ],
      "communication_flow": {
        "messaging_pattern": "sequential",
        "state_sharing": "shared_context",
        "error_handling": "propagate_and_log",
        "retry_strategy": {
          "max_retries": 3,
          "backoff_factor": 1.5,
          "retry_on_error_types": ["transient", "resource_limitation"]
        }
      },
      "monitoring": {
        "metrics": ["duration", "resource_usage", "error_count", "throughput"],
        "alerting": {
          "step_duration_threshold_ms": 300000,
          "error_count_threshold": 5
        }
      }
    },
    {
      "name": "valuation_pipeline",
      "description": "Run property valuation pipeline with model selection and validation",
      "steps": [
        {
          "step_id": "fetch_properties",
          "agent": "etl",
          "action": "fetch_properties",
          "params": {
            "benton_county_only": true,
            "include_gis_data": true,
            "include_historical_sales": true
          },
          "output_artifacts": ["property_dataset"],
          "success_criteria": {
            "min_properties": 500,
            "gis_data_completeness": "> 0.95"
          }
        },
        {
          "step_id": "prepare_features",
          "agent": "valuation",
          "action": "prepare_features",
          "input_artifacts": ["property_dataset"],
          "params": {
            "feature_engineering": "advanced",
            "use_gis_features": true,
            "spatial_clustering": true,
            "normalization_method": "standard_scaling"
          },
          "output_artifacts": ["feature_matrix", "feature_metadata"],
          "success_criteria": {
            "feature_count": ">= 20",
            "missing_values": "< 0.01"
          }
        },
        {
          "step_id": "run_valuation_models",
          "agent": "valuation",
          "action": "run_models",
          "input_artifacts": ["feature_matrix", "feature_metadata"],
          "params": {
            "models": ["basic", "advanced", "spatial_ensemble"],
            "cross_validation": true,
            "hyper_parameter_tuning": "bayesian_optimization",
            "ensemble_strategy": "stacked"
          },
          "output_artifacts": ["valuation_results", "model_metrics", "model_parameters"],
          "success_criteria": {
            "best_r2_score": "> 0.85",
            "mae_percent": "< 0.08"
          }
        },
        {
          "step_id": "validate_predictions",
          "agent": "validation",
          "action": "validate_predictions",
          "input_artifacts": ["valuation_results", "model_metrics", "property_dataset"],
          "params": {
            "performance_metrics": ["r2", "mae", "mape", "calibration_curve"],
            "subgroup_analysis": true,
            "error_analysis": true
          },
          "output_artifacts": ["validation_report", "validation_visualizations"],
          "success_criteria": {
            "all_metrics_threshold_met": true,
            "no_subgroup_bias": true,
            "calibration_error": "< 0.05"
          }
        },
        {
          "step_id": "publish_results",
          "agent": "valuation",
          "action": "publish_valuation_results",
          "input_artifacts": ["valuation_results", "validation_report"],
          "params": {
            "destination": "api_database",
            "include_confidence_scores": true,
            "version_tag": "auto-increment"
          },
          "output_artifacts": ["publication_report"],
          "success_criteria": {
            "all_records_published": true,
            "api_verification": true
          }
        }
      ],
      "communication_flow": {
        "messaging_pattern": "sequential_with_feedback",
        "state_sharing": "shared_context",
        "error_handling": "retry_then_skip",
        "retry_strategy": {
          "max_retries": 2,
          "backoff_factor": 2.0,
          "retry_on_error_types": ["transient", "resource_limitation", "data_quality"]
        }
      },
      "monitoring": {
        "metrics": ["duration", "model_performance", "prediction_error", "feature_importance_stability"],
        "alerting": {
          "performance_degradation_threshold": 0.05,
          "step_duration_threshold_ms": 600000
        }
      }
    }
  ],
  
  "_comment_communication": "Protocol for standardized agent communication",
  "inter_agent_communication_protocol": {
    "name": "BCBS-MPC-Protocol",
    "version": "3.0.0",
    "description": "Multi-Protocol Calibration (MPC) system for standardized agent communication",
    "message_schema": {
      "header": {
        "message_id": "string (UUID)",
        "timestamp": "ISO-8601 datetime",
        "sender_id": "string (agent identifier)",
        "receiver_id": "string or array (target agent(s))",
        "message_type": "enum (command, event, data, status, parameter, calibration, error)",
        "priority": "enum (critical, high, normal, low)",
        "correlation_id": "string (UUID for related messages)",
        "reply_to": "string (channel for responses)",
        "expires_at": "ISO-8601 datetime or null"
      },
      "body": {
        "content_type": "string (json, binary, text)",
        "content": "object (actual message payload)",
        "schema_version": "string (semantic version)",
        "is_encrypted": "boolean",
        "compression": "enum (none, gzip, zstd)",
        "digital_signature": "string (hash for verification)"
      },
      "metadata": {
        "task_id": "string (UUID of related task)",
        "workflow_id": "string (UUID of workflow)",
        "tags": "array of strings",
        "context": "object (additional context data)",
        "security_level": "enum (public, restricted, confidential)",
        "trace_id": "string (for distributed tracing)"
      }
    },
    "parameter_exchange": {
      "model_parameters": {
        "format": "named_parameter_set",
        "synchronization_strategy": "two-phase-commit",
        "versioning": "incremental_with_hash",
        "required_fields": [
          "parameter_set_id",
          "model_type",
          "creation_timestamp",
          "parameters",
          "version_hash"
        ],
        "validation_mechanism": {
          "validator": "TDD Validator",
          "thresholds": {
            "r2_score_min": 0.85,
            "rmse_max_percent": 0.12
          },
          "calibration_set": "base_calibration_set"
        },
        "examples": [
          {
            "_comment": "Example model parameter message from God-Tier Builder to TDD Validator",
            "parameter_set_id": "valuation_model_params_20250330",
            "model_type": "advanced_ensemble",
            "creation_timestamp": "2025-03-30T10:15:30Z",
            "parameters": {
              "lightgbm_learning_rate": 0.05,
              "lightgbm_max_depth": 6,
              "lightgbm_boosting_type": "gbdt",
              "linear_regularization": 0.01,
              "feature_weights": {
                "square_feet": 0.482,
                "bathrooms": 0.215,
                "bedrooms": 0.133,
                "property_age": 0.092,
                "lot_size": 0.078
              }
            },
            "version_hash": "3f7a91c4e8d2b06a79e01c5a4d6b84f2",
            "validation_required": true
          }
        ]
      }
    },
    "status_updates": {
      "format": "structured_status",
      "required_fields": [
        "agent_id",
        "status_code",
        "timestamp",
        "state",
        "progress",
        "health"
      ],
      "frequency": {
        "heartbeat": "60s",
        "state_change": "immediate",
        "progress_update": "5%"
      },
      "status_codes": {
        "100": "Initializing",
        "200": "Ready",
        "201": "Processing",
        "202": "Waiting",
        "300": "Warning",
        "400": "Error",
        "500": "Critical Error",
        "900": "Shutdown"
      },
      "examples": [
        {
          "_comment": "Example status update from God-Tier Builder",
          "agent_id": "god-tier-builder",
          "status_code": 201,
          "timestamp": "2025-03-30T10:20:45Z",
          "state": "training_model",
          "progress": 0.65,
          "health": {
            "memory_usage": 0.72,
            "cpu_usage": 0.85,
            "error_count": 0
          },
          "details": {
            "model_type": "lightgbm",
            "epoch": 65,
            "current_metric": {
              "train_rmse": 0.0823,
              "validation_rmse": 0.0911
            }
          }
        }
      ]
    },
    "calibration_exchange": {
      "format": "calibration_protocol",
      "required_fields": [
        "calibration_id",
        "timestamp",
        "calibration_type",
        "parameters",
        "validation_results"
      ],
      "calibration_types": {
        "model_parameters": "Update and validate model parameters",
        "feature_importance": "Update and validate feature importance weights",
        "threshold_update": "Update performance thresholds",
        "dataset_update": "Update calibration dataset reference"
      },
      "examples": [
        {
          "_comment": "Example calibration exchange from TDD Validator",
          "calibration_id": "cal-20250330-01",
          "timestamp": "2025-03-30T11:30:22Z",
          "calibration_type": "model_parameters",
          "parameters": {
            "lightgbm_learning_rate": 0.05,
            "lightgbm_max_depth": 6
          },
          "validation_results": {
            "r2_score": 0.872,
            "rmse": 0.0765,
            "mae": 0.0621,
            "validated": true,
            "confidence": 0.94
          },
          "approved": true,
          "applied_timestamp": "2025-03-30T11:32:45Z"
        }
      ]
    },
    "communication_patterns": {
      "request_response": {
        "description": "Synchronous request/response pattern",
        "timeout": 30000,
        "retry_policy": {
          "max_retries": 3,
          "backoff_ms": 1000,
          "backoff_multiplier": 2
        }
      },
      "publish_subscribe": {
        "description": "Asynchronous pub/sub pattern",
        "delivery_guarantee": "at_least_once",
        "filtering_capabilities": ["content-based", "topic-based"]
      },
      "streaming": {
        "description": "Continuous data flow pattern",
        "flow_control": "backpressure",
        "chunking_enabled": true
      },
      "workflow_messaging": {
        "description": "Workflow-specific messaging pattern",
        "state_persistence": true,
        "transactional": true,
        "saga_pattern_support": true
      }
    },
    "sequence_diagrams": {
      "model_parameter_update": [
        "1. God-Tier Builder generates new model parameters",
        "2. GTB sends parameters to Cascade Operator with message_type=parameter",
        "3. Cascade Operator validates message format and forwards to TDD Validator",
        "4. TDD Validator runs validation against calibration data",
        "5. Validator returns validation result via calibration_exchange channel",
        "6. If validated, Cascade Operator broadcasts parameter update to all agents",
        "7. All agents acknowledge receipt and apply parameters",
        "8. Cascade Operator records successful parameter update"
      ],
      "error_handling": [
        "1. Error is reported via error_reporting channel",
        "2. Cascade Operator logs error and determines severity",
        "3. For recoverable errors, retry logic is applied",
        "4. For non-recoverable errors, relevant agents are notified",
        "5. If critical, workflow is paused and administrator is alerted",
        "6. For severe errors, system state is recorded for recovery"
      ]
    },
    "security": {
      "authentication": {
        "method": "jwt",
        "token_lifetime": "8h",
        "renewal_strategy": "sliding"
      },
      "authorization": {
        "model": "role-based",
        "permission_verification": "message-level"
      },
      "encryption": {
        "transport_layer": "TLS 1.3",
        "message_level": "AES-256-GCM",
        "key_rotation": "weekly"
      },
      "auditing": {
        "message_logging": true,
        "sensitive_operations_only": false,
        "retention_period_days": 90
      }
    }
  },
  
  "_comment_calibration": "Configuration for model calibration data and parameter management",
  "calibration_data": {
    "description": "Configuration for model calibration data and parameter management",
    "storage": {
      "location": "database",
      "backup_strategy": "daily",
      "versioning": true,
      "access_control": "agent_role_based",
      "encryption": "at-rest",
      "partitioning": "by-date-and-type"
    },
    "data_sets": [
      {
        "id": "base_calibration_set",
        "description": "Baseline calibration dataset for model validation",
        "properties": {
          "size": 500,
          "source": "verified_sales",
          "date_range": "2024-01-01 to 2024-12-31",
          "region": "Benton County, WA",
          "validation_status": "gold_standard",
          "refresh_frequency": "quarterly"
        },
        "stratification": {
          "by_neighborhood": true,
          "by_property_type": true,
          "by_price_range": true
        },
        "usage_contexts": ["model_validation", "parameter_calibration", "drift_detection"]
      },
      {
        "id": "feature_importance_baseline",
        "description": "Reference feature importance values for validation",
        "data": {
          "square_feet": 0.482,
          "bathrooms": 0.215,
          "bedrooms": 0.133,
          "property_age": 0.092,
          "lot_size": 0.078,
          "spatial_cluster": 0.182,
          "neighborhood_quality": 0.145,
          "school_quality": 0.112,
          "distance_to_amenities": 0.088
        },
        "stability_threshold": 0.05,
        "update_policy": "validation_required"
      },
      {
        "id": "performance_thresholds",
        "description": "Minimum acceptable model performance metrics",
        "thresholds": {
          "r2_score": 0.85,
          "adj_r2_score": 0.83,
          "rmse_percent": 0.12,
          "mae_percent": 0.09,
          "mape": 0.08,
          "calibration_error": 0.04
        },
        "thresholds_by_property_type": {
          "single_family": {
            "r2_score": 0.88,
            "rmse_percent": 0.10
          },
          "multi_family": {
            "r2_score": 0.82,
            "rmse_percent": 0.15
          },
          "commercial": {
            "r2_score": 0.80,
            "rmse_percent": 0.18
          }
        }
      },
      {
        "id": "model_parameter_defaults",
        "description": "Default parameters for valuation models",
        "lightgbm_parameters": {
          "learning_rate": 0.05,
          "max_depth": 6,
          "num_leaves": 31,
          "boosting_type": "gbdt",
          "objective": "regression",
          "metric": "rmse",
          "feature_fraction": 0.8,
          "bagging_fraction": 0.8,
          "bagging_freq": 5,
          "min_data_in_leaf": 20,
          "lambda_l1": 0.1,
          "lambda_l2": 0.1
        },
        "linear_model_parameters": {
          "regularization_alpha": 0.01,
          "regularization_l1_ratio": 0.2
        },
        "spatial_model_parameters": {
          "distance_weight_decay": 0.2,
          "neighborhood_k": 15,
          "spatial_lag_coefficient": 0.3
        }
      }
    ],
    "calibration_workflows": [
      {
        "id": "full_calibration",
        "description": "Complete model calibration workflow",
        "steps": [
          "load_calibration_data",
          "initialize_baseline_parameters",
          "train_on_calibration_set",
          "validate_against_thresholds",
          "publish_calibration_results"
        ],
        "frequency": "weekly",
        "agents_involved": ["valuation", "validation"],
        "success_criteria": {
          "all_metrics_meet_thresholds": true,
          "parameter_stability": "within_tolerance",
          "no_significant_drift": true
        }
      },
      {
        "id": "parameter_validation",
        "description": "Quick validation of parameter updates",
        "steps": [
          "load_test_subset",
          "apply_parameters",
          "validate_results",
          "approve_or_reject_parameters"
        ],
        "frequency": "on_parameter_change",
        "agents_involved": ["validation"],
        "timeout_seconds": 300,
        "success_criteria": {
          "performance_not_degraded": true,
          "no_unexpected_prediction_shifts": true,
          "all_critical_metrics_meet_thresholds": true
        }
      },
      {
        "id": "drift_detection",
        "description": "Periodic check for data or model drift",
        "steps": [
          "load_calibration_data",
          "load_recent_data",
          "compare_distributions",
          "evaluate_prediction_shift",
          "report_drift_findings"
        ],
        "frequency": "daily",
        "agents_involved": ["etl", "validation"],
        "drift_thresholds": {
          "feature_distribution_kl_divergence": 0.15,
          "prediction_error_increase": 0.08,
          "feature_importance_shift": 0.10
        }
      }
    ],
    "calibration_api": {
      "endpoints": {
        "get_calibration_data": "/api/calibration/data/{dataset_id}",
        "update_parameters": "/api/calibration/parameters",
        "validate_parameters": "/api/calibration/validate",
        "get_thresholds": "/api/calibration/thresholds/{model_type}"
      },
      "authentication_required": true,
      "rate_limiting": {
        "requests_per_minute": 60,
        "burst_limit": 100
      }
    }
  },
  
  "_comment_error": "Structured error reporting system for agent operations",
  "error_reporting": {
    "description": "Structured error reporting system for agent operations",
    "error_levels": ["fatal", "critical", "error", "warning", "info", "debug"],
    "error_categories": [
      "model_failure",
      "data_quality",
      "validation_failure",
      "communication_error",
      "resource_limitation",
      "security_violation",
      "protocol_violation",
      "calibration_error",
      "workflow_error",
      "system_error"
    ],
    "reporting_format": {
      "error_id": "string (UUID)",
      "timestamp": "ISO-8601 datetime",
      "level": "enum (from error_levels)",
      "category": "enum (from error_categories)",
      "agent_id": "string (reporting agent)",
      "message": "string (human-readable description)",
      "details": "object (detailed error information)",
      "context": {
        "workflow_id": "string (associated workflow)",
        "step_id": "string (workflow step)",
        "task_id": "string (specific task)",
        "user_id": "string (associated user if any)"
      },
      "stack_trace": "string (for debug/error levels)",
      "correlation_id": "string (to track related errors)",
      "recovery_attempted": "boolean",
      "recovery_successful": "boolean"
    },
    "error_handling_policies": {
      "retry_policy": {
        "max_retries": {
          "critical": 1,
          "error": 3,
          "warning": 5
        },
        "backoff_strategy": "exponential",
        "initial_backoff_ms": 1000,
        "max_backoff_ms": 60000
      },
      "escalation_policy": {
        "auto_escalate_after_retries": true,
        "escalation_path": ["validation", "bootstrap", "human_operator"],
        "notification_channels": ["log", "message_queue", "email", "webhook"]
      },
      "recovery_strategies": {
        "model_failure": {
          "strategy": "fallback_to_previous_model",
          "notification_required": true
        },
        "data_quality": {
          "strategy": "skip_and_log",
          "threshold_for_abortion": 0.10
        },
        "communication_error": {
          "strategy": "retry_with_alternative_channel",
          "circuit_breaker_enabled": true
        },
        "resource_limitation": {
          "strategy": "throttle_and_retry",
          "scale_resources_if_available": true
        }
      }
    },
    "monitoring_and_alerting": {
      "error_rate_thresholds": {
        "critical_per_hour": 1,
        "error_per_hour": 5,
        "warning_per_hour": 20
      },
      "aggregation_windows": ["1m", "5m", "1h", "1d"],
      "alert_channels": [
        {
          "type": "email",
          "recipients": ["bcbs_ops@example.com"],
          "min_level": "error"
        },
        {
          "type": "webhook",
          "url": "https://api.bcbs-values.com/alerts",
          "min_level": "critical"
        },
        {
          "type": "log",
          "destination": "error_log",
          "min_level": "warning"
        }
      ],
      "error_analytics": {
        "trend_analysis": true,
        "pattern_detection": true,
        "correlation_analysis": true
      }
    },
    "examples": [
      {
        "_comment": "Example error report for model failure",
        "error_id": "err-20250330-15a2c87d",
        "timestamp": "2025-03-30T14:23:18Z",
        "level": "error",
        "category": "model_failure",
        "agent_id": "god-tier-builder",
        "message": "Failed to train LightGBM model due to convergence issues",
        "details": {
          "model_type": "lightgbm",
          "parameters": {
            "learning_rate": 0.05,
            "max_depth": 6
          },
          "error_details": "Model failed to converge after 100 iterations",
          "training_data_stats": {
            "rows": 5280,
            "features": 42,
            "missing_values_ratio": 0.02
          }
        },
        "context": {
          "workflow_id": "wf-20250330-valuation",
          "step_id": "run_valuation_models",
          "task_id": "train_lightgbm_model"
        },
        "stack_trace": "ValueError: Model failed to converge...",
        "correlation_id": "corr-20250330-8f4d29ac",
        "recovery_attempted": true,
        "recovery_successful": false
      },
      {
        "_comment": "Example error report for data quality issue",
        "error_id": "err-20250330-27b9f46e",
        "timestamp": "2025-03-30T10:42:33Z",
        "level": "warning",
        "category": "data_quality",
        "agent_id": "etl",
        "message": "High proportion of missing values in 'year_built' field",
        "details": {
          "field_name": "year_built",
          "missing_ratio": 0.28,
          "threshold": 0.10,
          "source": "pacs",
          "affected_records": 142,
          "imputation_applied": true,
          "imputation_method": "median_by_neighborhood"
        },
        "context": {
          "workflow_id": "wf-20250330-etl",
          "step_id": "transform_data",
          "task_id": "handle_missing_values"
        },
        "correlation_id": "corr-20250330-3c7e18ba",
        "recovery_attempted": true,
        "recovery_successful": true
      }
    ]
  },
  
  "_comment_configuration": "System-wide operational settings",
  "system_configuration": {
    "operational_modes": {
      "production": {
        "logging_level": "info",
        "performance_mode": true,
        "debug_features_enabled": false,
        "comprehensive_validation": true
      },
      "development": {
        "logging_level": "debug",
        "performance_mode": false,
        "debug_features_enabled": true,
        "comprehensive_validation": true
      },
      "test": {
        "logging_level": "debug",
        "performance_mode": false,
        "debug_features_enabled": true,
        "comprehensive_validation": true,
        "use_mocked_data": false
      }
    },
    "resource_management": {
      "connection_pools": {
        "database": {
          "max_connections": 20,
          "idle_timeout_seconds": 300,
          "validation_query": "SELECT 1"
        },
        "http": {
          "max_connections": 50,
          "keep_alive_seconds": 120,
          "timeout_seconds": 30
        }
      },
      "thread_pools": {
        "workflow_execution": {
          "core_pool_size": 10,
          "max_pool_size": 20,
          "queue_capacity": 100
        },
        "background_tasks": {
          "core_pool_size": 5,
          "max_pool_size": 10,
          "queue_capacity": 50
        }
      }
    },
    "api_integration": {
      "api_base_url": "http://localhost:5000/api",
      "authentication": {
        "method": "api_key",
        "key_header": "X-API-KEY",
        "key_environment_variable": "BCBS_VALUES_API_KEY"
      },
      "endpoints": {
        "valuation": "/valuations",
        "property": "/properties",
        "model": "/models",
        "calibration": "/calibration",
        "agent_status": "/agent-status"
      },
      "rate_limiting": {
        "max_requests_per_minute": 600,
        "burst_capacity": 100
      }
    },
    "current_mode": "production"
  }
}
