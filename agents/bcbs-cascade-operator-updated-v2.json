{
  "name": "BCBS Cascade Operator",
  "description": "Master orchestration protocol for coordinating agent communication in the BCBS Values platform",
  "version": "7.0.0",
  "last_updated": "2025-03-31",
  "author": "BCBS Values Engineering Team",
  
  "_comment_overview": "Core configuration for the Cascade Operator that coordinates inter-agent communication",
  "operator_config": {
    "execution_mode": "distributed",
    "message_broker": "redis",
    "logging_level": "debug",
    "message_retention_days": 30,
    "health_check_interval_seconds": 60,
    "cascade_metrics_enabled": true,
    "api_endpoint": "/api/cascade/v7",
    "failure_handling": {
      "max_retry_attempts": 3,
      "backoff_strategy": "exponential",
      "base_retry_delay_ms": 500,
      "max_retry_delay_ms": 32000,
      "circuit_breaker_threshold": 5
    },
    "real_time_feedback": {
      "progress_reporting": true,
      "health_monitoring": true,
      "bottleneck_detection": true,
      "alert_thresholds": {
        "task_duration": "> 120s",
        "error_rate": "> 5%",
        "resource_utilization": "> 85%",
        "model_drift": "> 10%",
        "calibration_deviation": "> 7.5%",
        "response_time": "> 2s",
        "message_processing_delay": "> 500ms",
        "queue_depth": "> 100 messages"
      }
    }
  },
  
  "_comment_registry": "Registry of all available agents that can be coordinated by this operator",
  "agent_registry": {
    "agent_types": [
      {
        "type": "bootstrap",
        "name": "Bootstrap Commander",
        "config_path": "agents/bcbs-bootstrap-commander.json",
        "capabilities": ["environment-setup", "dependency-validation", "test-execution", "workflow-initialization", "system-monitoring"],
        "communication_channels": ["direct-command", "status-update", "model-parameter-exchange", "protocol-calibration", "environment-feedback"],
        "protocol_version": "7.0.0",
        "role": "infrastructure",
        "priority": "high",
        "startup_sequence": 1,
        "security_clearance": "admin",
        "resource_requirements": {
          "memory": "medium",
          "cpu": "low",
          "disk": "low",
          "network": "medium"
        },
        "health_check_endpoint": "/api/agents/bootstrap/health",
        "failover_strategy": "restart-with-checkpoint",
        "scale_factor": 1,
        "max_instances": 1,
        "recovery_time_objective": "30s"
      },
      {
        "type": "etl",
        "name": "God-Tier Builder",
        "config_path": "agents/god-tier-builder.json",
        "capabilities": ["data-extraction", "data-transformation", "data-loading", "data-validation", "source-integration", "incremental-processing", "parallel-processing"],
        "communication_channels": ["data-pipeline", "validation-results", "status-update", "model-parameter-exchange", "data-quality-metrics", "schema-registry"],
        "protocol_version": "7.0.0",
        "role": "data-engineering",
        "priority": "high",
        "startup_sequence": 2,
        "security_clearance": "data-admin",
        "resource_requirements": {
          "memory": "high",
          "cpu": "high",
          "disk": "high",
          "network": "high"
        },
        "batch_capabilities": {
          "batch_size_limit": 10000,
          "partitioning_strategy": "dynamic",
          "incremental_processing": true,
          "parallel_execution": 8
        },
        "advanced_features": ["geospatial-integration", "time-series-analysis", "nlp-processing", "change-data-capture"],
        "health_check_endpoint": "/api/agents/etl/health",
        "failover_strategy": "checkpoint-recovery",
        "scale_factor": 2.5,
        "max_instances": 5,
        "recovery_time_objective": "2m"
      },
      {
        "type": "valuation",
        "name": "Valuation Engine",
        "config_path": "agents/valuation-engine.json",
        "capabilities": ["regression-modeling", "ensemble-methods", "gis-analysis", "feature-engineering", "model-evaluation", "hyperparameter-tuning"],
        "communication_channels": ["model-parameter-exchange", "prediction-streaming", "status-update", "calibration-feedback", "feature-importance", "prediction-interval"],
        "protocol_version": "7.0.0",
        "role": "modeling",
        "priority": "high",
        "startup_sequence": 3,
        "security_clearance": "model-admin",
        "resource_requirements": {
          "memory": "high",
          "cpu": "high",
          "disk": "medium",
          "network": "medium"
        },
        "modeling_capabilities": {
          "model_types": ["linear-regression", "lightgbm", "ensemble", "geospatial"],
          "validation_methods": ["cross-validation", "holdout", "time-series-cv"],
          "prediction_intervals": true,
          "uncertainty_quantification": true,
          "auto_feature_selection": true
        },
        "versioning": {
          "model_versioning": true,
          "experiment_tracking": true,
          "automatic_benchmarking": true
        },
        "health_check_endpoint": "/api/agents/valuation/health",
        "failover_strategy": "model-fallback",
        "scale_factor": 2.0,
        "max_instances": 3,
        "recovery_time_objective": "45s"
      },
      {
        "type": "validation",
        "name": "TDD Validator",
        "config_path": "agents/bcbs-tdd-validator.json",
        "capabilities": ["test-execution", "integration-testing", "regression-testing", "performance-testing", "security-testing", "data-validation"],
        "communication_channels": ["validation-results", "test-reports", "status-update", "model-parameter-exchange", "error-reporting", "calibration-feedback", "performance-metrics"],
        "protocol_version": "7.0.0",
        "role": "quality-assurance",
        "priority": "high",
        "startup_sequence": 4,
        "security_clearance": "validation-admin",
        "resource_requirements": {
          "memory": "medium",
          "cpu": "medium",
          "disk": "medium",
          "network": "low"
        },
        "validation_strategies": ["cross-validation", "holdout", "backtesting", "sensitivity", "monte-carlo", "adversarial", "counterfactual"],
        "metrics": ["r2", "adj_r2", "rmse", "mae", "mape", "calibration_error", "feature_importance_stability", "prediction_interval_coverage"],
        "health_check_endpoint": "/api/agents/validation/health",
        "failover_strategy": "checkpoint-recovery",
        "scale_factor": 1.0,
        "max_instances": 2,
        "recovery_time_objective": "1m30s"
      }
    ],
    "agent_relationships": {
      "hierarchical": [
        {
          "parent": "bootstrap",
          "children": ["etl", "valuation", "validation"],
          "relationship_type": "deployment-control",
          "delegation_rules": {
            "task_delegation": "priority-based",
            "escalation_path": "bootstrap",
            "monitoring_responsibility": "parent-to-child"
          }
        }
      ],
      "peer_to_peer": [
        {
          "agents": ["etl", "valuation"],
          "relationship_type": "data-model-pipeline",
          "communication_pattern": "sequential",
          "data_contract": {
            "schema_validation": true,
            "quality_thresholds": {
              "completeness": 0.95,
              "consistency": 0.98
            }
          }
        },
        {
          "agents": ["valuation", "validation"],
          "relationship_type": "model-validation-feedback",
          "communication_pattern": "bidirectional",
          "feedback_cycle": {
            "metrics_sharing": true,
            "anomaly_detection": true,
            "continuous_improvement": true
          }
        },
        {
          "agents": ["bootstrap", "validation"],
          "relationship_type": "test-coordination",
          "communication_pattern": "command-response",
          "success_criteria": {
            "test_coverage": "> 90%",
            "validation_accuracy": "> 95%"
          }
        }
      ]
    }
  },
  
  "_comment_message_protocol": "Message format specification for inter-agent communication",
  "message_protocol": {
    "message_schema": {
      "type": "object",
      "description": "Message schema for inter-agent communication",
      "properties": {
        "message_id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier for the message"
        },
        "timestamp": {
          "type": "string",
          "format": "iso8601",
          "description": "ISO 8601 timestamp when the message was created"
        },
        "sender": {
          "type": "object",
          "description": "Information about the sending agent",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the sending agent"
            },
            "name": {
              "type": "string",
              "description": "Name of the sending agent"
            },
            "type": {
              "type": "string",
              "description": "Type of the sending agent (e.g., bootstrap, etl, valuation, validation)"
            },
            "version": {
              "type": "string",
              "description": "Version of the sending agent"
            }
          }
        },
        "receiver": {
          "type": "object",
          "description": "Information about the receiving agent(s)",
          "properties": {
            "id": {
              "type": ["string", "array"],
              "description": "Unique identifier(s) of receiving agent(s)"
            },
            "broadcast": {
              "type": "boolean",
              "description": "If true, message is broadcast to all agents"
            }
          }
        },
        "message_type": {
          "type": "string",
          "enum": ["command", "event", "data", "status", "parameter", "calibration", "error", "heartbeat", "workflow"],
          "description": "Type of message being sent"
        },
        "priority": {
          "type": "string",
          "enum": ["critical", "high", "normal", "low"],
          "description": "Priority level of the message"
        },
        "correlation_id": {
          "type": "string",
          "format": "uuid",
          "description": "UUID for correlating related messages"
        },
        "reply_to": {
          "type": "string",
          "description": "Channel for responses to this message"
        },
        "protocol_version": {
          "type": "string",
          "description": "Semantic version of the protocol being used"
        },
        "workflow_id": {
          "type": "string",
          "description": "ID of the workflow this message is part of"
        },
        "payload": {
          "type": "object",
          "description": "Main message content",
          "properties": {
            "action": {
              "type": "string",
              "description": "Action to be performed (for command messages)"
            },
            "status": {
              "type": "string",
              "description": "Status information (for status messages)"
            },
            "data": {
              "type": "object",
              "description": "Data payload (for data messages)"
            },
            "parameters": {
              "type": "object",
              "description": "Parameters (for parameter messages)"
            },
            "error": {
              "type": "object",
              "description": "Error information (for error messages)"
            },
            "event": {
              "type": "string",
              "description": "Event information (for event messages)"
            },
            "workflow": {
              "type": "object",
              "description": "Workflow information (for workflow messages)"
            }
          }
        },
      
        "metadata": {
          "task_id": {
            "type": "string",
            "description": "UUID of related task"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags for message categorization"
          },
          "context": {
            "type": "object",
            "description": "Additional context data"
          },
          "security_level": {
            "type": "string",
            "enum": ["public", "restricted", "confidential", "secret"],
            "description": "Security classification of the message"
          },
          "execution_environment": {
            "type": "string",
            "enum": ["development", "testing", "production"],
            "description": "Environment where the message was generated"
          },
          "retention_policy": {
            "type": "string",
            "description": "How long to keep this message"
          }
        }
      }
    },
    
    "_comment_calibration": "Defines the calibration data structure for model and agent calibration",
    "calibration": {
      "calibration_schema": {
        "type": "object",
        "description": "Schema for calibration data",
        "properties": {
          "calibration_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for this calibration"
          },
          "timestamp": {
            "type": "string",
            "format": "iso8601",
            "description": "When the calibration was performed"
          },
          "agent_id": {
            "type": "string",
            "description": "ID of the agent being calibrated"
          },
          "type": {
            "type": "string",
            "enum": ["model_weights", "hyperparameters", "thresholds", "scaling_factors", "agent_parameters"],
            "description": "Type of calibration being performed"
          },
          "version": {
            "type": "string",
            "description": "Version of the calibration (semantic versioning)"
          },
          "metrics": {
            "type": "object",
            "description": "Performance metrics for this calibration",
            "properties": {
              "r2_score": {
                "type": "number",
                "description": "R-squared score"
              },
              "rmse": {
                "type": "number",
                "description": "Root mean squared error"
              },
              "mae": {
                "type": "number",
                "description": "Mean absolute error"
              },
              "prediction_variance": {
                "type": "number",
                "description": "Variance in predictions"
              },
              "calibration_error": {
                "type": "number",
                "description": "Error in calibration"
              }
            }
          },
          "parameters": {
            "type": "object",
            "description": "Calibrated parameters (structure depends on calibration type)"
          },
          "validation": {
            "type": "object",
            "description": "Validation information for this calibration",
            "properties": {
              "method": {
                "type": "string",
                "enum": ["cross_validation", "holdout", "time_series_cv"],
                "description": "Validation method used"
              },
              "fold_count": {
                "type": "integer",
                "description": "Number of folds (for cross-validation)"
              },
              "sample_count": {
                "type": "integer",
                "description": "Number of samples used"
              },
              "time_range": {
                "type": "object",
                "description": "Time range of validation data",
                "properties": {
                  "start": {
                    "type": "string",
                    "format": "iso8601"
                  },
                  "end": {
                    "type": "string",
                    "format": "iso8601"
                  }
                }
              },
              "data_sources": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Data sources used for validation"
              }
            }
          }
        }
      },
      
      "_comment_calibration_sample": "Sample calibration data structure for model weights",
      "calibration_sample": {
        "calibration_id": "f8c7d6e5-a4b3-c2d1-e0f9-98765432109",
        "timestamp": "2025-03-31T10:15:32.456Z",
        "agent_id": "valuation-agent-001",
        "type": "model_weights",
        "version": "2.3.0",
        "metrics": {
          "r2_score": 0.87,
          "rmse": 32150.75,
          "mae": 24980.21,
          "prediction_variance": 0.025,
          "calibration_error": 0.042
        },
        "parameters": {
          "weights": {
            "square_feet": 145.32,
            "bedrooms": 15250.87,
            "bathrooms": 21300.43,
            "lot_size": 2.87,
            "year_built": 320.15,
            "neighborhood_factor": 1.12
          },
          "intercept": 72500.0,
          "scaling_factors": {
            "square_feet": 0.001,
            "lot_size": 0.0001
          }
        },
        "validation": {
          "method": "cross_validation",
          "fold_count": 5,
          "sample_count": 1200,
          "time_range": {
            "start": "2024-01-01T00:00:00Z",
            "end": "2025-03-31T00:00:00Z"
          },
          "data_sources": ["mls_data", "tax_assessor", "census_data"]
        }
      }
    },
    
    "_comment_error_protocol": "Defines the error reporting protocol for agents",
    "error_protocol": {
      "error_schema": {
        "type": "object",
        "description": "Schema for error reporting",
        "properties": {
          "error_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for this error"
          },
          "timestamp": {
            "type": "string",
            "format": "iso8601",
            "description": "When the error occurred"
          },
          "agent_id": {
            "type": "string",
            "description": "ID of the agent reporting the error"
          },
          "severity": {
            "type": "string",
            "enum": ["critical", "error", "warning", "info"],
            "description": "Severity level of the error"
          },
          "error_code": {
            "type": "string",
            "description": "System-specific error code"
          },
          "message": {
            "type": "string",
            "description": "Human-readable error message"
          },
          "context": {
            "type": "object",
            "description": "Contextual information about the error",
            "properties": {
              "operation": {
                "type": "string",
                "description": "Operation being performed when the error occurred"
              },
              "input_parameters": {
                "type": "object",
                "description": "Input parameters at the time of error"
              },
              "resource_state": {
                "type": "object",
                "description": "State of resources at the time of error"
              },
              "workflow_state": {
                "type": "object",
                "description": "State of the workflow at the time of error"
              }
            }
          },
          "stacktrace": {
            "type": "string",
            "description": "Stack trace if available"
          },
          "retry_info": {
            "type": "object",
            "description": "Information about retry attempts",
            "properties": {
              "attempt_number": {
                "type": "integer",
                "description": "Current retry attempt number"
              },
              "max_attempts": {
                "type": "integer",
                "description": "Maximum number of retry attempts"
              },
              "next_retry_at": {
                "type": "string",
                "format": "iso8601",
                "description": "When the next retry will occur"
              },
              "backoff_strategy": {
                "type": "string",
                "description": "Backoff strategy being used"
              }
            }
          },
          "resolution": {
            "type": "object",
            "description": "Resolution information if resolved",
            "properties": {
              "resolved": {
                "type": "boolean",
                "description": "Whether the error has been resolved"
              },
              "resolution_time": {
                "type": "string",
                "format": "iso8601",
                "description": "When the error was resolved"
              },
              "resolution_method": {
                "type": "string",
                "description": "How the error was resolved"
              },
              "resolution_agent": {
                "type": "string",
                "description": "Agent that resolved the error"
              }
            }
          }
        }
      },
      
      "_comment_error_sample": "Sample error reporting message",
      "error_sample": {
        "error_id": "a1b2c3d4-e5f6-a7b8-c9d0-123456789012",
        "timestamp": "2025-03-31T11:45:23.789Z",
        "agent_id": "etl-agent-002",
        "severity": "error",
        "error_code": "ETL-DATA-1042",
        "message": "Failed to parse property data from MLS source due to inconsistent field format",
        "context": {
          "operation": "parse_mls_data",
          "input_parameters": {
            "source_file": "mls_data_20250331.csv",
            "format": "csv",
            "encoding": "utf-8"
          },
          "resource_state": {
            "cpu_usage": 0.72,
            "memory_usage": 0.68,
            "disk_free": "12.5GB"
          },
          "workflow_state": {
            "current_step": "data_extraction",
            "records_processed": 1247,
            "pipeline": "mls_update"
          }
        },
        "stacktrace": "Traceback (most recent call last):\n  File \"/app/etl/parsers.py\", line 152, in parse_mls_data\n    raw_data = pandas.read_csv(source_file)\n  File \"/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\", line 948, in read_csv\n    return _read(filepath_or_buffer, kwds)\nValueError: Inconsistent field delimiter in CSV row 1248",
        "retry_info": {
          "attempt_number": 2,
          "max_attempts": 3,
          "next_retry_at": "2025-03-31T11:47:17.895Z",
          "backoff_strategy": "exponential"
        },
        "resolution": {
          "resolved": false
        }
      }
    },
    
    "_comment_workflow_orchestration": "Instructions for orchestrating workflows among agents",
    "workflow_orchestration": {
      "workflow_schema": {
        "type": "object",
        "description": "Schema for workflow definitions",
        "properties": {
          "workflow_id": {
            "type": "string",
            "description": "Unique identifier for the workflow"
          },
          "name": {
            "type": "string",
            "description": "Human-readable name for the workflow"
          },
          "description": {
            "type": "string",
            "description": "Description of the workflow purpose"
          },
          "version": {
            "type": "string",
            "description": "Semantic version of the workflow"
          },
          "owner": {
            "type": "string",
            "description": "Agent that owns/manages this workflow"
          },
          "participants": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of agent IDs participating in this workflow"
          },
          "steps": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "step_id": {
                  "type": "string",
                  "description": "Identifier for this workflow step"
                },
                "name": {
                  "type": "string",
                  "description": "Name of this step"
                },
                "description": {
                  "type": "string",
                  "description": "Description of what this step does"
                },
                "agent": {
                  "type": "string",
                  "description": "Agent responsible for this step"
                },
                "action": {
                  "type": "string",
                  "description": "Action to perform in this step"
                },
                "parameters": {
                  "type": "object",
                  "description": "Parameters for the action"
                },
                "dependencies": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "IDs of steps that must complete before this one"
                },
                "timeout": {
                  "type": "string",
                  "description": "Timeout for this step (e.g., '30s', '5m')"
                },
                "retry": {
                  "type": "object",
                  "properties": {
                    "max_attempts": {
                      "type": "integer",
                      "description": "Maximum retry attempts"
                    },
                    "backoff": {
                      "type": "string",
                      "description": "Backoff strategy"
                    }
                  }
                },
                "on_success": {
                  "type": "object",
                  "description": "Actions to take on success"
                },
                "on_failure": {
                  "type": "object",
                  "description": "Actions to take on failure"
                },
                "on_timeout": {
                  "type": "object",
                  "description": "Actions to take on timeout"
                }
              }
            }
          },
          "triggers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["schedule", "event", "manual", "data-driven", "api"],
                  "description": "Type of trigger"
                },
                "config": {
                  "type": "object",
                  "description": "Trigger configuration"
                }
              }
            },
            "description": "Conditions that trigger this workflow"
          },
          "concurrency": {
            "type": "object",
            "properties": {
              "max_concurrent": {
                "type": "integer",
                "description": "Maximum concurrent workflow instances"
              },
              "queue_size": {
                "type": "integer",
                "description": "Maximum size of pending workflow queue"
              }
            },
            "description": "Concurrency settings for this workflow"
          },
          "timeout": {
            "type": "string",
            "description": "Timeout for the entire workflow"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Workflow categorization tags"
          }
        }
      },
      
      "_comment_workflow_sample": "Sample workflow definition for property valuation pipeline",
      "workflow_sample": {
        "workflow_id": "property-valuation-pipeline-001",
        "name": "End-to-End Property Valuation",
        "description": "Complete pipeline for property data ingestion, transformation, valuation, and validation",
        "version": "1.2.0",
        "owner": "bootstrap-commander",
        "participants": [
          "bootstrap-commander",
          "god-tier-builder",
          "valuation-engine-001",
          "tdd-validator"
        ],
        "steps": [
          {
            "step_id": "data-extraction",
            "name": "Extract Property Data",
            "description": "Extract raw property data from MLS, tax records, and public sources",
            "agent": "god-tier-builder",
            "action": "extract_data",
            "parameters": {
              "sources": ["mls", "tax_assessor", "public_records"],
              "date_range": {
                "start": "2025-03-01T00:00:00Z",
                "end": "2025-03-31T23:59:59Z"
              },
              "include_images": false,
              "batch_size": 5000
            },
            "dependencies": [],
            "timeout": "15m",
            "retry": {
              "max_attempts": 3,
              "backoff": "exponential"
            }
          },
          {
            "step_id": "data-transformation",
            "name": "Transform Property Data",
            "description": "Clean, normalize, and enhance property records",
            "agent": "god-tier-builder",
            "action": "transform_data",
            "parameters": {
              "validation_rules": "standard",
              "normalization": true,
              "gis_enrichment": true,
              "neighborhood_classification": true
            },
            "dependencies": ["data-extraction"],
            "timeout": "20m"
          },
          {
            "step_id": "feature-engineering",
            "name": "Feature Engineering",
            "description": "Generate advanced features for valuation model",
            "agent": "valuation-engine-001",
            "action": "engineer_features",
            "parameters": {
              "temporal_features": true,
              "spatial_features": true,
              "property_attributes": true,
              "market_indicators": true
            },
            "dependencies": ["data-transformation"],
            "timeout": "10m"
          },
          {
            "step_id": "model-selection",
            "name": "Model Selection and Calibration",
            "description": "Select and calibrate optimal valuation model",
            "agent": "valuation-engine-001",
            "action": "select_model",
            "parameters": {
              "candidates": ["linear_regression", "lightgbm", "ensemble"],
              "validation_method": "cross_validation",
              "folds": 5,
              "metrics": ["rmse", "mae", "r2"]
            },
            "dependencies": ["feature-engineering"],
            "timeout": "15m"
          },
          {
            "step_id": "property-valuation",
            "name": "Property Valuation",
            "description": "Generate property valuations using selected model",
            "agent": "valuation-engine-001",
            "action": "value_properties",
            "parameters": {
              "include_metrics": true,
              "confidence_intervals": true,
              "batch_size": 1000
            },
            "dependencies": ["model-selection"],
            "timeout": "25m"
          },
          {
            "step_id": "validation",
            "name": "Valuation Validation",
            "description": "Validate property valuations against benchmark data",
            "agent": "tdd-validator",
            "action": "validate_valuations",
            "parameters": {
              "validation_sources": ["recent_sales", "appraisals"],
              "threshold_rmse": 35000,
              "threshold_mape": 0.12
            },
            "dependencies": ["property-valuation"],
            "timeout": "10m",
            "on_failure": {
              "action": "notify",
              "parameters": {
                "channels": ["alert-system", "validation-team"],
                "level": "warning"
              }
            }
          },
          {
            "step_id": "result-storage",
            "name": "Store Valuation Results",
            "description": "Persist final valuation results to database",
            "agent": "god-tier-builder",
            "action": "store_results",
            "parameters": {
              "destination": "valuation_results",
              "store_history": true,
              "indexing": true
            },
            "dependencies": ["validation"],
            "timeout": "5m"
          },
          {
            "step_id": "workflow-completion",
            "name": "Complete Workflow",
            "description": "Finalize workflow and generate summary report",
            "agent": "bootstrap-commander",
            "action": "complete_workflow",
            "parameters": {
              "generate_report": true,
              "notify_completion": true
            },
            "dependencies": ["result-storage"],
            "timeout": "2m"
          }
        ],
        "triggers": [
          {
            "type": "schedule",
            "config": {
              "cron": "0 0 * * 1",
              "timezone": "UTC"
            }
          },
          {
            "type": "event",
            "config": {
              "event_type": "data_update",
              "source": "mls"
            }
          },
          {
            "type": "api",
            "config": {
              "endpoint": "/api/workflows/valuation/trigger",
              "method": "POST"
            }
          }
        ],
        "concurrency": {
          "max_concurrent": 2,
          "queue_size": 5
        },
        "timeout": "2h",
        "tags": ["valuation", "production", "weekly"]
      }
    },
    
    "_comment_status_messages": "Sample status update messages between agents",
    "sample_messages": {
      "bootstrap_to_etl_command": {
        "message_id": "123e4567-e89b-12d3-a456-426614174000",
        "timestamp": "2025-03-31T09:15:32Z",
        "sender": {
          "id": "bootstrap-commander-001",
          "name": "Bootstrap Commander",
          "type": "bootstrap",
          "version": "1.0.0"
        },
        "receiver": {
          "id": "god-tier-builder-001",
          "broadcast": false
        },
        "message_type": "command",
        "priority": "high",
        "correlation_id": "87d380e0-c48f-4c45-8904-602e94eaad2e",
        "protocol_version": "7.0.0",
        "workflow_id": "property-valuation-pipeline-001",
        "payload": {
          "action": "start_data_extraction",
          "parameters": {
            "source": "mls",
            "date_range": {
              "start": "2025-03-01T00:00:00Z",
              "end": "2025-03-31T23:59:59Z"
            },
            "incremental": true
          }
        },
        "metadata": {
          "task_id": "t-123456",
          "tags": ["extraction", "mls", "monthly"],
          "security_level": "restricted",
          "execution_environment": "production"
        }
      },
      
      "etl_to_bootstrap_status": {
        "message_id": "123e4567-e89b-12d3-a456-426614174001",
        "timestamp": "2025-03-31T09:20:45Z",
        "sender": {
          "id": "god-tier-builder-001",
          "name": "God-Tier Builder",
          "type": "etl",
          "version": "2.3.0"
        },
        "receiver": {
          "id": "bootstrap-commander-001",
          "broadcast": false
        },
        "message_type": "status",
        "priority": "normal",
        "correlation_id": "87d380e0-c48f-4c45-8904-602e94eaad2e",
        "reply_to": "status-channel",
        "protocol_version": "7.0.0",
        "workflow_id": "property-valuation-pipeline-001",
        "payload": {
          "status": "in_progress",
          "data": {
            "step": "data_extraction",
            "progress": 0.35,
            "records_processed": 3500,
            "records_total": 10000,
            "estimated_completion_time": "2025-03-31T09:45:00Z",
            "metrics": {
              "extraction_rate": 250.5,
              "error_rate": 0.002,
              "resource_utilization": {
                "cpu": 0.65,
                "memory": 0.48,
                "disk_io": 0.72
              }
            }
          }
        },
        "metadata": {
          "task_id": "t-123456",
          "tags": ["extraction", "status", "progress"]
        }
      },
      
      "etl_to_valuation_data": {
        "message_id": "123e4567-e89b-12d3-a456-426614174002",
        "timestamp": "2025-03-31T10:05:00Z",
        "sender": {
          "id": "god-tier-builder-001",
          "name": "God-Tier Builder",
          "type": "etl",
          "version": "2.3.0"
        },
        "receiver": {
          "id": "valuation-engine-001",
          "broadcast": false
        },
        "message_type": "data",
        "priority": "normal",
        "correlation_id": "87d380e0-c48f-4c45-8904-602e94eaad2e",
        "protocol_version": "7.0.0",
        "workflow_id": "property-valuation-pipeline-001",
        "payload": {
          "data": {
            "batch_id": "batch-5678",
            "record_count": 1000,
            "schema_version": "property-v3.2",
            "data_location": {
              "type": "database",
              "connection": "property_data",
              "table": "transformed_properties",
              "query_filter": "batch_id = 'batch-5678'"
            },
            "summary_statistics": {
              "avg_square_feet": 2150.5,
              "median_year_built": 2005,
              "property_type_distribution": {
                "single_family": 0.75,
                "condo": 0.15,
                "multi_family": 0.05,
                "land": 0.05
              }
            }
          }
        },
        "metadata": {
          "task_id": "t-123456",
          "tags": ["batch", "transformed", "ready-for-valuation"]
        }
      },
      
      "valuation_error_message": {
        "message_id": "123e4567-e89b-12d3-a456-426614174003",
        "timestamp": "2025-03-31T10:15:23Z",
        "sender": {
          "id": "valuation-engine-001",
          "name": "Valuation Engine",
          "type": "valuation",
          "version": "3.1.2"
        },
        "receiver": {
          "id": ["bootstrap-commander-001", "god-tier-builder-001"],
          "broadcast": false
        },
        "message_type": "error",
        "priority": "high",
        "correlation_id": "87d380e0-c48f-4c45-8904-602e94eaad2e",
        "protocol_version": "7.0.0",
        "workflow_id": "property-valuation-pipeline-001",
        "payload": {
          "error": {
            "error_code": "VAL-DATA-1042",
            "message": "Missing required GIS data for 150 properties in batch",
            "severity": "warning",
            "details": {
              "batch_id": "batch-5678",
              "affected_count": 150,
              "first_affected_id": "prop-12345",
              "missing_fields": ["census_tract", "school_district", "flood_zone"]
            },
            "recovery_action": "proceed_with_limited_features"
          }
        },
        "metadata": {
          "task_id": "t-123456",
          "tags": ["error", "data-quality", "gis"],
          "security_level": "restricted"
        }
      },
      
      "validator_to_bootstrap_completion": {
        "message_id": "123e4567-e89b-12d3-a456-426614174004",
        "timestamp": "2025-03-31T11:30:45Z",
        "sender": {
          "id": "tdd-validator-001",
          "name": "TDD Validator",
          "type": "validation",
          "version": "2.0.1"
        },
        "receiver": {
          "id": "bootstrap-commander-001",
          "broadcast": false
        },
        "message_type": "status",
        "priority": "normal",
        "correlation_id": "87d380e0-c48f-4c45-8904-602e94eaad2e",
        "protocol_version": "7.0.0",
        "workflow_id": "property-valuation-pipeline-001",
        "payload": {
          "status": "completed",
          "data": {
            "step": "valuation_validation",
            "success": true,
            "validation_results": {
              "rmse": 32150.75,
              "r2": 0.87,
              "mae": 24980.21,
              "mape": 0.082,
              "sample_size": 1000,
              "outlier_count": 12,
              "pass_criteria": [
                {"metric": "rmse", "threshold": 35000, "actual": 32150.75, "result": "pass"},
                {"metric": "mape", "threshold": 0.12, "actual": 0.082, "result": "pass"}
              ]
            },
            "recommendations": [
              "Consider additional training on luxury properties to reduce bias",
              "Feature importance analysis shows strong dependence on square footage"
            ]
          }
        },
        "metadata": {
          "task_id": "t-123456",
          "tags": ["validation", "completed", "success"],
          "execution_environment": "production"
        }
      },
      
      "broadcast_completion_announcement": {
        "message_id": "123e4567-e89b-12d3-a456-426614174005",
        "timestamp": "2025-03-31T11:45:00Z",
        "sender": {
          "id": "bootstrap-commander-001",
          "name": "Bootstrap Commander",
          "type": "bootstrap",
          "version": "1.0.0"
        },
        "receiver": {
          "id": "*",
          "broadcast": true
        },
        "message_type": "event",
        "priority": "normal",
        "correlation_id": "87d380e0-c48f-4c45-8904-602e94eaad2e",
        "protocol_version": "7.0.0",
        "workflow_id": "property-valuation-pipeline-001",
        "payload": {
          "event": "workflow_completed",
          "data": {
            "workflow_id": "property-valuation-pipeline-001",
            "start_time": "2025-03-31T09:15:00Z",
            "end_time": "2025-03-31T11:45:00Z",
            "status": "success",
            "summary": {
              "properties_processed": 10000,
              "valuations_generated": 9850,
              "data_quality_score": 0.94,
              "overall_rmse": 32150.75,
              "model_used": "ensemble"
            },
            "next_scheduled_run": "2025-04-07T09:00:00Z"
          }
        },
        "metadata": {
          "tags": ["workflow", "completed", "broadcast"],
          "security_level": "public"
        }
      }
    }
  }
}